'''
Task # 1
Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
В расчете необходимо использовать формулу: (выработка в часах*ставка в час) + премия.
Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.
'''
from sys import argv
script_name, first_param, second_param, third_param = argv
print("Расчет заработной платы сотрудника.")
print("Выработка в часах: ", first_param)
print("Ставка в час: ", second_param)
print("Премия: ", third_param)
print("Итого: ", int(first_param) * int(second_param) + int(third_param))

'''
Task # 2
Представлен список чисел. 
Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
'''
my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
new_list = [str(i) for i in my_list]
new_list_2 = [int(new_list[i]) for i in range(1, len(new_list)) if int(new_list[i]) > int(new_list[i-1])]
print(new_list_2)

'''
Task # 3
Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21.
Необходимо решить задание в одну строку
'''
print([i for i in range(2, 240) if i % 20 == 0 or i % 21 == 0])

'''
Task # 4
Представлен список чисел. Определить элементы списка, не имеющие повторений. 
Сформировать итоговый массив чисел, соответствующих требованию. 
Элементы вывести в порядке их следования в исходном списке
'''
my_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
new_list = [i for i in set(my_list) if my_list.count(i) > 1]
new_list_2 = [i for i in my_list if i not in new_list]
print(new_list_2)

'''
Task # 5
Реализовать формирование списка, используя функцию range() и возможности генератора.
В список должны войти четные числа от 100 до 1000 (включая границы).
Необходимо получить результат вычисления произведения всех элементов списка
'''
from functools import reduce
my_list = [i for i in range(100, 1001)]
print(reduce(lambda a, b: a + b, my_list))

'''
Task # 6
Реализовать два небольших скрипта:
а) итератор, генерирующий целые числа, начиная с указанного,
б) итератор, повторяющий элементы некоторого списка, определенного заранее.
'''
from itertools import count, cycle

for i in count(3):
    if i > 10:
        break
    else:
        print(i)

my_list = ('один два три четыре пять').split()

n = 0
for i in cycle(my_list):
    if n > 7:
        break
    print(i)
    n += 1

'''
Task # 7
Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
При вызове функции должен создаваться объект-генератор.
'''
n = int(input('Введите, пожалуйста, число:'))

def fact(n):
    if n == 1:
        yield f'{n}! = {n}'
        return 1
    else:
        x = n * (yield from fact(n-1))
        yield f'{n}! = {x}'
        return x

for i in fact(n):
    print(i)